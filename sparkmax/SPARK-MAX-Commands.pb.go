// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SPARK-MAX-Commands.proto

/*
Package sparkmax is a generated protocol buffer package.

It is generated from these files:
	SPARK-MAX-Commands.proto
	SPARK-MAX-Types.proto

It has these top-level messages:
	RequestWire
	ResponseWire
	ConnectRequest
	ConnectResponse
	DisconnectRequest
	DisconnectResponse
	PingRequest
	PingResponse
	BurnRequest
	BurnResponse
	CommandLineRequest
	CommandLineResponse
	RootCommand
	RootResponse
	ListRequest
	ListResponse
	FirmwareRequest
	FirmwareResponse
	HeartbeatRequest
	AddressRequest
	AddressResponse
	SetParameterRequest
	GetParameterRequest
	ParameterResponse
	ParameterListRequest
	ParameterListResponse
	SetpointRequest
	SetpointResponse
	FollowerRequest
	DRVStatusRequest
	DRVStatusResponse
	DRVStat0
	DRVStat1
*/
package sparkmax

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Data format to send over 0mq containing one request
type RequestWire struct {
	// Types that are valid to be assigned to Req:
	//	*RequestWire_List
	//	*RequestWire_Firmware
	//	*RequestWire_Heartbeat
	//	*RequestWire_Address
	//	*RequestWire_SetParameter
	//	*RequestWire_GetParameter
	//	*RequestWire_Setpoint
	//	*RequestWire_Connect
	//	*RequestWire_Disconnect
	//	*RequestWire_Ping
	//	*RequestWire_Follower
	//	*RequestWire_Burn
	//	*RequestWire_ParameterList
	//	*RequestWire_DrvStatus
	Req isRequestWire_Req `protobuf_oneof:"req"`
}

func (m *RequestWire) Reset()                    { *m = RequestWire{} }
func (m *RequestWire) String() string            { return proto.CompactTextString(m) }
func (*RequestWire) ProtoMessage()               {}
func (*RequestWire) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isRequestWire_Req interface{ isRequestWire_Req() }

type RequestWire_List struct {
	List *ListRequest `protobuf:"bytes,12,opt,name=list,oneof"`
}
type RequestWire_Firmware struct {
	Firmware *FirmwareRequest `protobuf:"bytes,13,opt,name=firmware,oneof"`
}
type RequestWire_Heartbeat struct {
	Heartbeat *HeartbeatRequest `protobuf:"bytes,14,opt,name=heartbeat,oneof"`
}
type RequestWire_Address struct {
	Address *AddressRequest `protobuf:"bytes,15,opt,name=address,oneof"`
}
type RequestWire_SetParameter struct {
	SetParameter *SetParameterRequest `protobuf:"bytes,16,opt,name=setParameter,oneof"`
}
type RequestWire_GetParameter struct {
	GetParameter *GetParameterRequest `protobuf:"bytes,17,opt,name=getParameter,oneof"`
}
type RequestWire_Setpoint struct {
	Setpoint *SetpointRequest `protobuf:"bytes,18,opt,name=setpoint,oneof"`
}
type RequestWire_Connect struct {
	Connect *ConnectRequest `protobuf:"bytes,19,opt,name=connect,oneof"`
}
type RequestWire_Disconnect struct {
	Disconnect *DisconnectRequest `protobuf:"bytes,20,opt,name=disconnect,oneof"`
}
type RequestWire_Ping struct {
	Ping *PingRequest `protobuf:"bytes,21,opt,name=ping,oneof"`
}
type RequestWire_Follower struct {
	Follower *FollowerRequest `protobuf:"bytes,22,opt,name=follower,oneof"`
}
type RequestWire_Burn struct {
	Burn *BurnRequest `protobuf:"bytes,23,opt,name=burn,oneof"`
}
type RequestWire_ParameterList struct {
	ParameterList *ParameterListRequest `protobuf:"bytes,24,opt,name=parameterList,oneof"`
}
type RequestWire_DrvStatus struct {
	DrvStatus *DRVStatusRequest `protobuf:"bytes,25,opt,name=drvStatus,oneof"`
}

func (*RequestWire_List) isRequestWire_Req()          {}
func (*RequestWire_Firmware) isRequestWire_Req()      {}
func (*RequestWire_Heartbeat) isRequestWire_Req()     {}
func (*RequestWire_Address) isRequestWire_Req()       {}
func (*RequestWire_SetParameter) isRequestWire_Req()  {}
func (*RequestWire_GetParameter) isRequestWire_Req()  {}
func (*RequestWire_Setpoint) isRequestWire_Req()      {}
func (*RequestWire_Connect) isRequestWire_Req()       {}
func (*RequestWire_Disconnect) isRequestWire_Req()    {}
func (*RequestWire_Ping) isRequestWire_Req()          {}
func (*RequestWire_Follower) isRequestWire_Req()      {}
func (*RequestWire_Burn) isRequestWire_Req()          {}
func (*RequestWire_ParameterList) isRequestWire_Req() {}
func (*RequestWire_DrvStatus) isRequestWire_Req()     {}

func (m *RequestWire) GetReq() isRequestWire_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *RequestWire) GetList() *ListRequest {
	if x, ok := m.GetReq().(*RequestWire_List); ok {
		return x.List
	}
	return nil
}

func (m *RequestWire) GetFirmware() *FirmwareRequest {
	if x, ok := m.GetReq().(*RequestWire_Firmware); ok {
		return x.Firmware
	}
	return nil
}

func (m *RequestWire) GetHeartbeat() *HeartbeatRequest {
	if x, ok := m.GetReq().(*RequestWire_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *RequestWire) GetAddress() *AddressRequest {
	if x, ok := m.GetReq().(*RequestWire_Address); ok {
		return x.Address
	}
	return nil
}

func (m *RequestWire) GetSetParameter() *SetParameterRequest {
	if x, ok := m.GetReq().(*RequestWire_SetParameter); ok {
		return x.SetParameter
	}
	return nil
}

func (m *RequestWire) GetGetParameter() *GetParameterRequest {
	if x, ok := m.GetReq().(*RequestWire_GetParameter); ok {
		return x.GetParameter
	}
	return nil
}

func (m *RequestWire) GetSetpoint() *SetpointRequest {
	if x, ok := m.GetReq().(*RequestWire_Setpoint); ok {
		return x.Setpoint
	}
	return nil
}

func (m *RequestWire) GetConnect() *ConnectRequest {
	if x, ok := m.GetReq().(*RequestWire_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *RequestWire) GetDisconnect() *DisconnectRequest {
	if x, ok := m.GetReq().(*RequestWire_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (m *RequestWire) GetPing() *PingRequest {
	if x, ok := m.GetReq().(*RequestWire_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *RequestWire) GetFollower() *FollowerRequest {
	if x, ok := m.GetReq().(*RequestWire_Follower); ok {
		return x.Follower
	}
	return nil
}

func (m *RequestWire) GetBurn() *BurnRequest {
	if x, ok := m.GetReq().(*RequestWire_Burn); ok {
		return x.Burn
	}
	return nil
}

func (m *RequestWire) GetParameterList() *ParameterListRequest {
	if x, ok := m.GetReq().(*RequestWire_ParameterList); ok {
		return x.ParameterList
	}
	return nil
}

func (m *RequestWire) GetDrvStatus() *DRVStatusRequest {
	if x, ok := m.GetReq().(*RequestWire_DrvStatus); ok {
		return x.DrvStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestWire) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestWire_OneofMarshaler, _RequestWire_OneofUnmarshaler, _RequestWire_OneofSizer, []interface{}{
		(*RequestWire_List)(nil),
		(*RequestWire_Firmware)(nil),
		(*RequestWire_Heartbeat)(nil),
		(*RequestWire_Address)(nil),
		(*RequestWire_SetParameter)(nil),
		(*RequestWire_GetParameter)(nil),
		(*RequestWire_Setpoint)(nil),
		(*RequestWire_Connect)(nil),
		(*RequestWire_Disconnect)(nil),
		(*RequestWire_Ping)(nil),
		(*RequestWire_Follower)(nil),
		(*RequestWire_Burn)(nil),
		(*RequestWire_ParameterList)(nil),
		(*RequestWire_DrvStatus)(nil),
	}
}

func _RequestWire_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestWire)
	// req
	switch x := m.Req.(type) {
	case *RequestWire_List:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.List); err != nil {
			return err
		}
	case *RequestWire_Firmware:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Firmware); err != nil {
			return err
		}
	case *RequestWire_Heartbeat:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *RequestWire_Address:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *RequestWire_SetParameter:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetParameter); err != nil {
			return err
		}
	case *RequestWire_GetParameter:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetParameter); err != nil {
			return err
		}
	case *RequestWire_Setpoint:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Setpoint); err != nil {
			return err
		}
	case *RequestWire_Connect:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Connect); err != nil {
			return err
		}
	case *RequestWire_Disconnect:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disconnect); err != nil {
			return err
		}
	case *RequestWire_Ping:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *RequestWire_Follower:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Follower); err != nil {
			return err
		}
	case *RequestWire_Burn:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Burn); err != nil {
			return err
		}
	case *RequestWire_ParameterList:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParameterList); err != nil {
			return err
		}
	case *RequestWire_DrvStatus:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrvStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RequestWire.Req has unexpected type %T", x)
	}
	return nil
}

func _RequestWire_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestWire)
	switch tag {
	case 12: // req.list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_List{msg}
		return true, err
	case 13: // req.firmware
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FirmwareRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Firmware{msg}
		return true, err
	case 14: // req.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartbeatRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Heartbeat{msg}
		return true, err
	case 15: // req.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddressRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Address{msg}
		return true, err
	case 16: // req.setParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetParameterRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_SetParameter{msg}
		return true, err
	case 17: // req.getParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetParameterRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_GetParameter{msg}
		return true, err
	case 18: // req.setpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetpointRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Setpoint{msg}
		return true, err
	case 19: // req.connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnectRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Connect{msg}
		return true, err
	case 20: // req.disconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DisconnectRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Disconnect{msg}
		return true, err
	case 21: // req.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PingRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Ping{msg}
		return true, err
	case 22: // req.follower
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FollowerRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Follower{msg}
		return true, err
	case 23: // req.burn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BurnRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_Burn{msg}
		return true, err
	case 24: // req.parameterList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParameterListRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_ParameterList{msg}
		return true, err
	case 25: // req.drvStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DRVStatusRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RequestWire_DrvStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RequestWire_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestWire)
	// req
	switch x := m.Req.(type) {
	case *RequestWire_List:
		s := proto.Size(x.List)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Firmware:
		s := proto.Size(x.Firmware)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Address:
		s := proto.Size(x.Address)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_SetParameter:
		s := proto.Size(x.SetParameter)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_GetParameter:
		s := proto.Size(x.GetParameter)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Setpoint:
		s := proto.Size(x.Setpoint)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Connect:
		s := proto.Size(x.Connect)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Disconnect:
		s := proto.Size(x.Disconnect)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Follower:
		s := proto.Size(x.Follower)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_Burn:
		s := proto.Size(x.Burn)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_ParameterList:
		s := proto.Size(x.ParameterList)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestWire_DrvStatus:
		s := proto.Size(x.DrvStatus)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//
// Data format to recieve over 0mq containting one response
type ResponseWire struct {
	// Types that are valid to be assigned to Resp:
	//	*ResponseWire_Root
	//	*ResponseWire_List
	//	*ResponseWire_Firmware
	//	*ResponseWire_Address
	//	*ResponseWire_Parameter
	//	*ResponseWire_Parameterlist
	//	*ResponseWire_Setpoint
	//	*ResponseWire_Connect
	//	*ResponseWire_Disconnect
	//	*ResponseWire_Ping
	//	*ResponseWire_Burn
	//	*ResponseWire_DrvStatus
	Resp isResponseWire_Resp `protobuf_oneof:"resp"`
}

func (m *ResponseWire) Reset()                    { *m = ResponseWire{} }
func (m *ResponseWire) String() string            { return proto.CompactTextString(m) }
func (*ResponseWire) ProtoMessage()               {}
func (*ResponseWire) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isResponseWire_Resp interface{ isResponseWire_Resp() }

type ResponseWire_Root struct {
	Root *RootResponse `protobuf:"bytes,11,opt,name=root,oneof"`
}
type ResponseWire_List struct {
	List *ListResponse `protobuf:"bytes,12,opt,name=list,oneof"`
}
type ResponseWire_Firmware struct {
	Firmware *FirmwareResponse `protobuf:"bytes,13,opt,name=firmware,oneof"`
}
type ResponseWire_Address struct {
	Address *AddressResponse `protobuf:"bytes,14,opt,name=address,oneof"`
}
type ResponseWire_Parameter struct {
	Parameter *ParameterResponse `protobuf:"bytes,15,opt,name=parameter,oneof"`
}
type ResponseWire_Parameterlist struct {
	Parameterlist *ParameterListResponse `protobuf:"bytes,16,opt,name=parameterlist,oneof"`
}
type ResponseWire_Setpoint struct {
	Setpoint *SetpointResponse `protobuf:"bytes,17,opt,name=setpoint,oneof"`
}
type ResponseWire_Connect struct {
	Connect *ConnectResponse `protobuf:"bytes,18,opt,name=connect,oneof"`
}
type ResponseWire_Disconnect struct {
	Disconnect *DisconnectResponse `protobuf:"bytes,19,opt,name=disconnect,oneof"`
}
type ResponseWire_Ping struct {
	Ping *PingResponse `protobuf:"bytes,20,opt,name=ping,oneof"`
}
type ResponseWire_Burn struct {
	Burn *BurnResponse `protobuf:"bytes,21,opt,name=burn,oneof"`
}
type ResponseWire_DrvStatus struct {
	DrvStatus *DRVStatusResponse `protobuf:"bytes,25,opt,name=drvStatus,oneof"`
}

func (*ResponseWire_Root) isResponseWire_Resp()          {}
func (*ResponseWire_List) isResponseWire_Resp()          {}
func (*ResponseWire_Firmware) isResponseWire_Resp()      {}
func (*ResponseWire_Address) isResponseWire_Resp()       {}
func (*ResponseWire_Parameter) isResponseWire_Resp()     {}
func (*ResponseWire_Parameterlist) isResponseWire_Resp() {}
func (*ResponseWire_Setpoint) isResponseWire_Resp()      {}
func (*ResponseWire_Connect) isResponseWire_Resp()       {}
func (*ResponseWire_Disconnect) isResponseWire_Resp()    {}
func (*ResponseWire_Ping) isResponseWire_Resp()          {}
func (*ResponseWire_Burn) isResponseWire_Resp()          {}
func (*ResponseWire_DrvStatus) isResponseWire_Resp()     {}

func (m *ResponseWire) GetResp() isResponseWire_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *ResponseWire) GetRoot() *RootResponse {
	if x, ok := m.GetResp().(*ResponseWire_Root); ok {
		return x.Root
	}
	return nil
}

func (m *ResponseWire) GetList() *ListResponse {
	if x, ok := m.GetResp().(*ResponseWire_List); ok {
		return x.List
	}
	return nil
}

func (m *ResponseWire) GetFirmware() *FirmwareResponse {
	if x, ok := m.GetResp().(*ResponseWire_Firmware); ok {
		return x.Firmware
	}
	return nil
}

func (m *ResponseWire) GetAddress() *AddressResponse {
	if x, ok := m.GetResp().(*ResponseWire_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ResponseWire) GetParameter() *ParameterResponse {
	if x, ok := m.GetResp().(*ResponseWire_Parameter); ok {
		return x.Parameter
	}
	return nil
}

func (m *ResponseWire) GetParameterlist() *ParameterListResponse {
	if x, ok := m.GetResp().(*ResponseWire_Parameterlist); ok {
		return x.Parameterlist
	}
	return nil
}

func (m *ResponseWire) GetSetpoint() *SetpointResponse {
	if x, ok := m.GetResp().(*ResponseWire_Setpoint); ok {
		return x.Setpoint
	}
	return nil
}

func (m *ResponseWire) GetConnect() *ConnectResponse {
	if x, ok := m.GetResp().(*ResponseWire_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *ResponseWire) GetDisconnect() *DisconnectResponse {
	if x, ok := m.GetResp().(*ResponseWire_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (m *ResponseWire) GetPing() *PingResponse {
	if x, ok := m.GetResp().(*ResponseWire_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *ResponseWire) GetBurn() *BurnResponse {
	if x, ok := m.GetResp().(*ResponseWire_Burn); ok {
		return x.Burn
	}
	return nil
}

func (m *ResponseWire) GetDrvStatus() *DRVStatusResponse {
	if x, ok := m.GetResp().(*ResponseWire_DrvStatus); ok {
		return x.DrvStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ResponseWire) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ResponseWire_OneofMarshaler, _ResponseWire_OneofUnmarshaler, _ResponseWire_OneofSizer, []interface{}{
		(*ResponseWire_Root)(nil),
		(*ResponseWire_List)(nil),
		(*ResponseWire_Firmware)(nil),
		(*ResponseWire_Address)(nil),
		(*ResponseWire_Parameter)(nil),
		(*ResponseWire_Parameterlist)(nil),
		(*ResponseWire_Setpoint)(nil),
		(*ResponseWire_Connect)(nil),
		(*ResponseWire_Disconnect)(nil),
		(*ResponseWire_Ping)(nil),
		(*ResponseWire_Burn)(nil),
		(*ResponseWire_DrvStatus)(nil),
	}
}

func _ResponseWire_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ResponseWire)
	// resp
	switch x := m.Resp.(type) {
	case *ResponseWire_Root:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Root); err != nil {
			return err
		}
	case *ResponseWire_List:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.List); err != nil {
			return err
		}
	case *ResponseWire_Firmware:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Firmware); err != nil {
			return err
		}
	case *ResponseWire_Address:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *ResponseWire_Parameter:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Parameter); err != nil {
			return err
		}
	case *ResponseWire_Parameterlist:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Parameterlist); err != nil {
			return err
		}
	case *ResponseWire_Setpoint:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Setpoint); err != nil {
			return err
		}
	case *ResponseWire_Connect:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Connect); err != nil {
			return err
		}
	case *ResponseWire_Disconnect:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disconnect); err != nil {
			return err
		}
	case *ResponseWire_Ping:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *ResponseWire_Burn:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Burn); err != nil {
			return err
		}
	case *ResponseWire_DrvStatus:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrvStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ResponseWire.Resp has unexpected type %T", x)
	}
	return nil
}

func _ResponseWire_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ResponseWire)
	switch tag {
	case 11: // resp.root
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RootResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Root{msg}
		return true, err
	case 12: // resp.list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_List{msg}
		return true, err
	case 13: // resp.firmware
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FirmwareResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Firmware{msg}
		return true, err
	case 14: // resp.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddressResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Address{msg}
		return true, err
	case 15: // resp.parameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParameterResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Parameter{msg}
		return true, err
	case 16: // resp.parameterlist
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParameterListResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Parameterlist{msg}
		return true, err
	case 17: // resp.setpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetpointResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Setpoint{msg}
		return true, err
	case 18: // resp.connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnectResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Connect{msg}
		return true, err
	case 19: // resp.disconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DisconnectResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Disconnect{msg}
		return true, err
	case 20: // resp.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PingResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Ping{msg}
		return true, err
	case 21: // resp.burn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BurnResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_Burn{msg}
		return true, err
	case 25: // resp.drvStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DRVStatusResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &ResponseWire_DrvStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ResponseWire_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ResponseWire)
	// resp
	switch x := m.Resp.(type) {
	case *ResponseWire_Root:
		s := proto.Size(x.Root)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_List:
		s := proto.Size(x.List)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Firmware:
		s := proto.Size(x.Firmware)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Address:
		s := proto.Size(x.Address)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Parameter:
		s := proto.Size(x.Parameter)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Parameterlist:
		s := proto.Size(x.Parameterlist)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Setpoint:
		s := proto.Size(x.Setpoint)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Connect:
		s := proto.Size(x.Connect)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Disconnect:
		s := proto.Size(x.Disconnect)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_Burn:
		s := proto.Size(x.Burn)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseWire_DrvStatus:
		s := proto.Size(x.DrvStatus)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//
// Request format for connect()
type ConnectRequest struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnectRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

//
// Response format for connect()
type ConnectResponse struct {
	Connected bool `protobuf:"varint,1,opt,name=connected" json:"connected,omitempty"`
}

func (m *ConnectResponse) Reset()                    { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()               {}
func (*ConnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConnectResponse) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

//
// Request format for disconnect()
type DisconnectRequest struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *DisconnectRequest) Reset()                    { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string            { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()               {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DisconnectRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

//
// Response format for disconnect()
type DisconnectResponse struct {
	Connected bool `protobuf:"varint,1,opt,name=connected" json:"connected,omitempty"`
}

func (m *DisconnectResponse) Reset()                    { *m = DisconnectResponse{} }
func (m *DisconnectResponse) String() string            { return proto.CompactTextString(m) }
func (*DisconnectResponse) ProtoMessage()               {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DisconnectResponse) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

//
// Response format for ping()
type PingRequest struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PingRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

//
// Response format for ping()
type PingResponse struct {
	Root      *RootResponse `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Connected bool          `protobuf:"varint,2,opt,name=connected" json:"connected,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PingResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *PingResponse) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

//
// Burn command
type BurnRequest struct {
	Root   *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Verify bool         `protobuf:"varint,2,opt,name=verify" json:"verify,omitempty"`
}

func (m *BurnRequest) Reset()                    { *m = BurnRequest{} }
func (m *BurnRequest) String() string            { return proto.CompactTextString(m) }
func (*BurnRequest) ProtoMessage()               {}
func (*BurnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BurnRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *BurnRequest) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

type BurnResponse struct {
	Root   *RootResponse `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Verify bool          `protobuf:"varint,2,opt,name=verify" json:"verify,omitempty"`
}

func (m *BurnResponse) Reset()                    { *m = BurnResponse{} }
func (m *BurnResponse) String() string            { return proto.CompactTextString(m) }
func (*BurnResponse) ProtoMessage()               {}
func (*BurnResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BurnResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *BurnResponse) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

type CommandLineRequest struct {
	Stdin string `protobuf:"bytes,1,opt,name=stdin" json:"stdin,omitempty"`
}

func (m *CommandLineRequest) Reset()                    { *m = CommandLineRequest{} }
func (m *CommandLineRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandLineRequest) ProtoMessage()               {}
func (*CommandLineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommandLineRequest) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

type CommandLineResponse struct {
	Stderr string `protobuf:"bytes,1,opt,name=stderr" json:"stderr,omitempty"`
	Stdout string `protobuf:"bytes,2,opt,name=stdout" json:"stdout,omitempty"`
}

func (m *CommandLineResponse) Reset()                    { *m = CommandLineResponse{} }
func (m *CommandLineResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandLineResponse) ProtoMessage()               {}
func (*CommandLineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommandLineResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *CommandLineResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

//
// All RPC services implement this request
// keepalive and help are not implemented
type RootCommand struct {
	Device    string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Keepalive bool   `protobuf:"varint,2,opt,name=keepalive" json:"keepalive,omitempty"`
	Help      bool   `protobuf:"varint,3,opt,name=help" json:"help,omitempty"`
}

func (m *RootCommand) Reset()                    { *m = RootCommand{} }
func (m *RootCommand) String() string            { return proto.CompactTextString(m) }
func (*RootCommand) ProtoMessage()               {}
func (*RootCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RootCommand) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *RootCommand) GetKeepalive() bool {
	if m != nil {
		return m.Keepalive
	}
	return false
}

func (m *RootCommand) GetHelp() bool {
	if m != nil {
		return m.Help
	}
	return false
}

//
// All RPC services implement this response
// helpString not implemented
type RootResponse struct {
	HelpString string `protobuf:"bytes,1,opt,name=helpString" json:"helpString,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *RootResponse) Reset()                    { *m = RootResponse{} }
func (m *RootResponse) String() string            { return proto.CompactTextString(m) }
func (*RootResponse) ProtoMessage()               {}
func (*RootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RootResponse) GetHelpString() string {
	if m != nil {
		return m.HelpString
	}
	return ""
}

func (m *RootResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

//
// Request format for list() command
type ListRequest struct {
	Root *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	All  bool         `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

//
// Response format for list() command
type ListResponse struct {
	DeviceList    []string      `protobuf:"bytes,1,rep,name=deviceList" json:"deviceList,omitempty"`
	DeviceDetails []string      `protobuf:"bytes,2,rep,name=deviceDetails" json:"deviceDetails,omitempty"`
	Root          *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListResponse) GetDeviceList() []string {
	if m != nil {
		return m.DeviceList
	}
	return nil
}

func (m *ListResponse) GetDeviceDetails() []string {
	if m != nil {
		return m.DeviceDetails
	}
	return nil
}

func (m *ListResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for firmware() command
type FirmwareRequest struct {
	Root     *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Filename string       `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *FirmwareRequest) Reset()                    { *m = FirmwareRequest{} }
func (m *FirmwareRequest) String() string            { return proto.CompactTextString(m) }
func (*FirmwareRequest) ProtoMessage()               {}
func (*FirmwareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FirmwareRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *FirmwareRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

//
// Response format for list() command
type FirmwareResponse struct {
	Version string        `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Root    *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *FirmwareResponse) Reset()                    { *m = FirmwareResponse{} }
func (m *FirmwareResponse) String() string            { return proto.CompactTextString(m) }
func (*FirmwareResponse) ProtoMessage()               {}
func (*FirmwareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FirmwareResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FirmwareResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for heartbeat() command
type HeartbeatRequest struct {
	Root   *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Enable bool         `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *HeartbeatRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *HeartbeatRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

//
// Request format for address() command
type AddressRequest struct {
	Root    *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Address uint32       `protobuf:"varint,2,opt,name=address" json:"address,omitempty"`
}

func (m *AddressRequest) Reset()                    { *m = AddressRequest{} }
func (m *AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()               {}
func (*AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AddressRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *AddressRequest) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

//
// Response format for address() command
type AddressResponse struct {
	CurrentAddress  uint32        `protobuf:"varint,1,opt,name=currentAddress" json:"currentAddress,omitempty"`
	PreviousAddress uint32        `protobuf:"varint,2,opt,name=previousAddress" json:"previousAddress,omitempty"`
	Root            *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *AddressResponse) Reset()                    { *m = AddressResponse{} }
func (m *AddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AddressResponse) ProtoMessage()               {}
func (*AddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddressResponse) GetCurrentAddress() uint32 {
	if m != nil {
		return m.CurrentAddress
	}
	return 0
}

func (m *AddressResponse) GetPreviousAddress() uint32 {
	if m != nil {
		return m.PreviousAddress
	}
	return 0
}

func (m *AddressResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request type for Set Parameter()
type SetParameterRequest struct {
	Root      *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Parameter ConfigParam  `protobuf:"varint,2,opt,name=parameter,enum=sparkmax.ConfigParam" json:"parameter,omitempty"`
	Value     string       `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *SetParameterRequest) Reset()                    { *m = SetParameterRequest{} }
func (m *SetParameterRequest) String() string            { return proto.CompactTextString(m) }
func (*SetParameterRequest) ProtoMessage()               {}
func (*SetParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SetParameterRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *SetParameterRequest) GetParameter() ConfigParam {
	if m != nil {
		return m.Parameter
	}
	return ConfigParam_kCanID
}

func (m *SetParameterRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//
// Request type for Get Parameter()
type GetParameterRequest struct {
	Root      *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Parameter ConfigParam  `protobuf:"varint,2,opt,name=parameter,enum=sparkmax.ConfigParam" json:"parameter,omitempty"`
}

func (m *GetParameterRequest) Reset()                    { *m = GetParameterRequest{} }
func (m *GetParameterRequest) String() string            { return proto.CompactTextString(m) }
func (*GetParameterRequest) ProtoMessage()               {}
func (*GetParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetParameterRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *GetParameterRequest) GetParameter() ConfigParam {
	if m != nil {
		return m.Parameter
	}
	return ConfigParam_kCanID
}

//
// Response type for Set/Get Parameter()
type ParameterResponse struct {
	Value  string        `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Type   ParamType     `protobuf:"varint,2,opt,name=type,enum=sparkmax.ParamType" json:"type,omitempty"`
	Status ParamStatus   `protobuf:"varint,3,opt,name=status,enum=sparkmax.ParamStatus" json:"status,omitempty"`
	Root   *RootResponse `protobuf:"bytes,4,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterResponse) Reset()                    { *m = ParameterResponse{} }
func (m *ParameterResponse) String() string            { return proto.CompactTextString(m) }
func (*ParameterResponse) ProtoMessage()               {}
func (*ParameterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ParameterResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ParameterResponse) GetType() ParamType {
	if m != nil {
		return m.Type
	}
	return ParamType_int32
}

func (m *ParameterResponse) GetStatus() ParamStatus {
	if m != nil {
		return m.Status
	}
	return ParamStatus_paramOK
}

func (m *ParameterResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type ParameterListRequest struct {
	Root *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterListRequest) Reset()                    { *m = ParameterListRequest{} }
func (m *ParameterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ParameterListRequest) ProtoMessage()               {}
func (*ParameterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ParameterListRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

type ParameterListResponse struct {
	Parameter []string      `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	Type      []ParamType   `protobuf:"varint,2,rep,packed,name=type,enum=sparkmax.ParamType" json:"type,omitempty"`
	Root      *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterListResponse) Reset()                    { *m = ParameterListResponse{} }
func (m *ParameterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ParameterListResponse) ProtoMessage()               {}
func (*ParameterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ParameterListResponse) GetParameter() []string {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *ParameterListResponse) GetType() []ParamType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ParameterListResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for Setpoint() command
type SetpointRequest struct {
	Root     *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Setpoint float32      `protobuf:"fixed32,2,opt,name=setpoint" json:"setpoint,omitempty"`
	Enable   bool         `protobuf:"varint,3,opt,name=enable" json:"enable,omitempty"`
}

func (m *SetpointRequest) Reset()                    { *m = SetpointRequest{} }
func (m *SetpointRequest) String() string            { return proto.CompactTextString(m) }
func (*SetpointRequest) ProtoMessage()               {}
func (*SetpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SetpointRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *SetpointRequest) GetSetpoint() float32 {
	if m != nil {
		return m.Setpoint
	}
	return 0
}

func (m *SetpointRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

//
// Response format for Setpoint() command
// isRunning is not implemented yet
type SetpointResponse struct {
	Setpoint  float32       `protobuf:"fixed32,1,opt,name=setpoint" json:"setpoint,omitempty"`
	IsRunning bool          `protobuf:"varint,2,opt,name=isRunning" json:"isRunning,omitempty"`
	Root      *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *SetpointResponse) Reset()                    { *m = SetpointResponse{} }
func (m *SetpointResponse) String() string            { return proto.CompactTextString(m) }
func (*SetpointResponse) ProtoMessage()               {}
func (*SetpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SetpointResponse) GetSetpoint() float32 {
	if m != nil {
		return m.Setpoint
	}
	return 0
}

func (m *SetpointResponse) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *SetpointResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type FollowerRequest struct {
	Root           *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Followerid     uint32       `protobuf:"varint,2,opt,name=followerid" json:"followerid,omitempty"`
	Followerconfig uint32       `protobuf:"varint,3,opt,name=followerconfig" json:"followerconfig,omitempty"`
}

func (m *FollowerRequest) Reset()                    { *m = FollowerRequest{} }
func (m *FollowerRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowerRequest) ProtoMessage()               {}
func (*FollowerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *FollowerRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *FollowerRequest) GetFollowerid() uint32 {
	if m != nil {
		return m.Followerid
	}
	return 0
}

func (m *FollowerRequest) GetFollowerconfig() uint32 {
	if m != nil {
		return m.Followerconfig
	}
	return 0
}

//
// Request for status from the DRV8320
type DRVStatusRequest struct {
	Root *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *DRVStatusRequest) Reset()                    { *m = DRVStatusRequest{} }
func (m *DRVStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*DRVStatusRequest) ProtoMessage()               {}
func (*DRVStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DRVStatusRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// DRV Status Response
type DRVStatusResponse struct {
	Stat0 *DRVStat0     `protobuf:"bytes,1,opt,name=stat0" json:"stat0,omitempty"`
	Stat1 *DRVStat1     `protobuf:"bytes,2,opt,name=stat1" json:"stat1,omitempty"`
	Root  *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *DRVStatusResponse) Reset()                    { *m = DRVStatusResponse{} }
func (m *DRVStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*DRVStatusResponse) ProtoMessage()               {}
func (*DRVStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DRVStatusResponse) GetStat0() *DRVStat0 {
	if m != nil {
		return m.Stat0
	}
	return nil
}

func (m *DRVStatusResponse) GetStat1() *DRVStat1 {
	if m != nil {
		return m.Stat1
	}
	return nil
}

func (m *DRVStatusResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// DRV8320 Stat0 register
type DRVStat0 struct {
	//
	// Indicates VDS overcurrent fault on the C low-side MOSFET
	VDS_LC bool `protobuf:"varint,1,opt,name=VDS_LC,json=VDSLC" json:"VDS_LC,omitempty"`
	//
	// Indicates VDS overcurrent fault on the C high-side MOSFET
	VDS_HC bool `protobuf:"varint,2,opt,name=VDS_HC,json=VDSHC" json:"VDS_HC,omitempty"`
	//
	// Indicates VDS overcurrent fault on the B low-side MOSFET
	VDS_LB bool `protobuf:"varint,3,opt,name=VDS_LB,json=VDSLB" json:"VDS_LB,omitempty"`
	//
	// Indicates VDS overcurrent fault on the B high-side MOSFET
	VDS_HB bool `protobuf:"varint,4,opt,name=VDS_HB,json=VDSHB" json:"VDS_HB,omitempty"`
	//
	// Indicates VDS overcurrent fault on the A low-side MOSFET
	VDS_LA bool `protobuf:"varint,5,opt,name=VDS_LA,json=VDSLA" json:"VDS_LA,omitempty"`
	//
	// Indicates VDS overcurrent fault on the A high-side MOSFET
	VDS_HA bool `protobuf:"varint,6,opt,name=VDS_HA,json=VDSHA" json:"VDS_HA,omitempty"`
	//
	// Indicates overtemperature shutdown
	OTSD bool `protobuf:"varint,7,opt,name=OTSD" json:"OTSD,omitempty"`
	//
	// Indicates undervoltage lockout fault condition
	UVLO bool `protobuf:"varint,8,opt,name=UVLO" json:"UVLO,omitempty"`
	//
	// Indicates gate drive fault condition
	GDF bool `protobuf:"varint,9,opt,name=GDF" json:"GDF,omitempty"`
	//
	// Indicates VDS monitor overcurrent fault condition
	VDS_OCP bool `protobuf:"varint,10,opt,name=VDS_OCP,json=VDSOCP" json:"VDS_OCP,omitempty"`
	//
	// Logic OR of FAULT status registers. Mirrors nFAULT pin.
	FAULT bool `protobuf:"varint,11,opt,name=FAULT" json:"FAULT,omitempty"`
}

func (m *DRVStat0) Reset()                    { *m = DRVStat0{} }
func (m *DRVStat0) String() string            { return proto.CompactTextString(m) }
func (*DRVStat0) ProtoMessage()               {}
func (*DRVStat0) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DRVStat0) GetVDS_LC() bool {
	if m != nil {
		return m.VDS_LC
	}
	return false
}

func (m *DRVStat0) GetVDS_HC() bool {
	if m != nil {
		return m.VDS_HC
	}
	return false
}

func (m *DRVStat0) GetVDS_LB() bool {
	if m != nil {
		return m.VDS_LB
	}
	return false
}

func (m *DRVStat0) GetVDS_HB() bool {
	if m != nil {
		return m.VDS_HB
	}
	return false
}

func (m *DRVStat0) GetVDS_LA() bool {
	if m != nil {
		return m.VDS_LA
	}
	return false
}

func (m *DRVStat0) GetVDS_HA() bool {
	if m != nil {
		return m.VDS_HA
	}
	return false
}

func (m *DRVStat0) GetOTSD() bool {
	if m != nil {
		return m.OTSD
	}
	return false
}

func (m *DRVStat0) GetUVLO() bool {
	if m != nil {
		return m.UVLO
	}
	return false
}

func (m *DRVStat0) GetGDF() bool {
	if m != nil {
		return m.GDF
	}
	return false
}

func (m *DRVStat0) GetVDS_OCP() bool {
	if m != nil {
		return m.VDS_OCP
	}
	return false
}

func (m *DRVStat0) GetFAULT() bool {
	if m != nil {
		return m.FAULT
	}
	return false
}

//
// DRV8320 Stat1 register
type DRVStat1 struct {
	//
	// Indicates gate drive fault on the C low-side MOSFET
	VGS_LC bool `protobuf:"varint,1,opt,name=VGS_LC,json=VGSLC" json:"VGS_LC,omitempty"`
	//
	// Indicates gate drive fault on the C high-side MOSFET
	VGS_HC bool `protobuf:"varint,2,opt,name=VGS_HC,json=VGSHC" json:"VGS_HC,omitempty"`
	//
	// Indicates gate drive fault on the B low-side MOSFET
	VGS_LB bool `protobuf:"varint,3,opt,name=VGS_LB,json=VGSLB" json:"VGS_LB,omitempty"`
	//
	// Indicates gate drive fault on the B high-side MOSFET
	VGS_HB bool `protobuf:"varint,4,opt,name=VGS_HB,json=VGSHB" json:"VGS_HB,omitempty"`
	//
	// Indicates gate drive fault on the A low-side MOSFET
	VGS_LA bool `protobuf:"varint,5,opt,name=VGS_LA,json=VGSLA" json:"VGS_LA,omitempty"`
	//
	// Indicates gate drive fault on the A high-side MOSFET
	VGS_HA bool `protobuf:"varint,6,opt,name=VGS_HA,json=VGSHA" json:"VGS_HA,omitempty"`
	//
	// Indicates charge pump undervoltage fault condition
	CPUV bool `protobuf:"varint,7,opt,name=CPUV" json:"CPUV,omitempty"`
	//
	// Indicates overtemperature warning
	OTW bool `protobuf:"varint,8,opt,name=OTW" json:"OTW,omitempty"`
	//
	// Always 0 for DRV8320
	SC_OC bool `protobuf:"varint,9,opt,name=SC_OC,json=SCOC" json:"SC_OC,omitempty"`
	//
	// Always 0 for DRV8320
	SB_OC bool `protobuf:"varint,10,opt,name=SB_OC,json=SBOC" json:"SB_OC,omitempty"`
	//
	// Always 0 for DRV8320
	SA_OC bool `protobuf:"varint,11,opt,name=SA_OC,json=SAOC" json:"SA_OC,omitempty"`
}

func (m *DRVStat1) Reset()                    { *m = DRVStat1{} }
func (m *DRVStat1) String() string            { return proto.CompactTextString(m) }
func (*DRVStat1) ProtoMessage()               {}
func (*DRVStat1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DRVStat1) GetVGS_LC() bool {
	if m != nil {
		return m.VGS_LC
	}
	return false
}

func (m *DRVStat1) GetVGS_HC() bool {
	if m != nil {
		return m.VGS_HC
	}
	return false
}

func (m *DRVStat1) GetVGS_LB() bool {
	if m != nil {
		return m.VGS_LB
	}
	return false
}

func (m *DRVStat1) GetVGS_HB() bool {
	if m != nil {
		return m.VGS_HB
	}
	return false
}

func (m *DRVStat1) GetVGS_LA() bool {
	if m != nil {
		return m.VGS_LA
	}
	return false
}

func (m *DRVStat1) GetVGS_HA() bool {
	if m != nil {
		return m.VGS_HA
	}
	return false
}

func (m *DRVStat1) GetCPUV() bool {
	if m != nil {
		return m.CPUV
	}
	return false
}

func (m *DRVStat1) GetOTW() bool {
	if m != nil {
		return m.OTW
	}
	return false
}

func (m *DRVStat1) GetSC_OC() bool {
	if m != nil {
		return m.SC_OC
	}
	return false
}

func (m *DRVStat1) GetSB_OC() bool {
	if m != nil {
		return m.SB_OC
	}
	return false
}

func (m *DRVStat1) GetSA_OC() bool {
	if m != nil {
		return m.SA_OC
	}
	return false
}

func init() {
	proto.RegisterType((*RequestWire)(nil), "sparkmax.RequestWire")
	proto.RegisterType((*ResponseWire)(nil), "sparkmax.ResponseWire")
	proto.RegisterType((*ConnectRequest)(nil), "sparkmax.connectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "sparkmax.connectResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "sparkmax.disconnectRequest")
	proto.RegisterType((*DisconnectResponse)(nil), "sparkmax.disconnectResponse")
	proto.RegisterType((*PingRequest)(nil), "sparkmax.pingRequest")
	proto.RegisterType((*PingResponse)(nil), "sparkmax.pingResponse")
	proto.RegisterType((*BurnRequest)(nil), "sparkmax.burnRequest")
	proto.RegisterType((*BurnResponse)(nil), "sparkmax.burnResponse")
	proto.RegisterType((*CommandLineRequest)(nil), "sparkmax.commandLineRequest")
	proto.RegisterType((*CommandLineResponse)(nil), "sparkmax.commandLineResponse")
	proto.RegisterType((*RootCommand)(nil), "sparkmax.rootCommand")
	proto.RegisterType((*RootResponse)(nil), "sparkmax.rootResponse")
	proto.RegisterType((*ListRequest)(nil), "sparkmax.listRequest")
	proto.RegisterType((*ListResponse)(nil), "sparkmax.listResponse")
	proto.RegisterType((*FirmwareRequest)(nil), "sparkmax.firmwareRequest")
	proto.RegisterType((*FirmwareResponse)(nil), "sparkmax.firmwareResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "sparkmax.heartbeatRequest")
	proto.RegisterType((*AddressRequest)(nil), "sparkmax.addressRequest")
	proto.RegisterType((*AddressResponse)(nil), "sparkmax.addressResponse")
	proto.RegisterType((*SetParameterRequest)(nil), "sparkmax.setParameterRequest")
	proto.RegisterType((*GetParameterRequest)(nil), "sparkmax.getParameterRequest")
	proto.RegisterType((*ParameterResponse)(nil), "sparkmax.parameterResponse")
	proto.RegisterType((*ParameterListRequest)(nil), "sparkmax.parameterListRequest")
	proto.RegisterType((*ParameterListResponse)(nil), "sparkmax.parameterListResponse")
	proto.RegisterType((*SetpointRequest)(nil), "sparkmax.setpointRequest")
	proto.RegisterType((*SetpointResponse)(nil), "sparkmax.setpointResponse")
	proto.RegisterType((*FollowerRequest)(nil), "sparkmax.followerRequest")
	proto.RegisterType((*DRVStatusRequest)(nil), "sparkmax.DRVStatusRequest")
	proto.RegisterType((*DRVStatusResponse)(nil), "sparkmax.DRVStatusResponse")
	proto.RegisterType((*DRVStat0)(nil), "sparkmax.DRVStat0")
	proto.RegisterType((*DRVStat1)(nil), "sparkmax.DRVStat1")
}

func init() { proto.RegisterFile("SPARK-MAX-Commands.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcb, 0x73, 0xdb, 0x36,
	0x13, 0x17, 0xa3, 0x87, 0xad, 0x95, 0xfc, 0x82, 0x1f, 0x61, 0x98, 0x7c, 0xf9, 0x32, 0x9c, 0xef,
	0xe1, 0xe6, 0xd5, 0x38, 0x69, 0x26, 0x9d, 0xa6, 0xe9, 0x54, 0xa2, 0x2a, 0xa6, 0xad, 0x32, 0xd2,
	0x50, 0xb6, 0xe3, 0x5b, 0x86, 0xb6, 0x10, 0x87, 0x13, 0x99, 0x54, 0x40, 0x4a, 0x49, 0x6e, 0x3d,
	0xf4, 0xd4, 0x1e, 0x7a, 0xe8, 0xdf, 0xd1, 0x53, 0x8f, 0xfd, 0xcb, 0xda, 0x99, 0xce, 0x74, 0x00,
	0x02, 0x04, 0x48, 0x89, 0x4a, 0x79, 0xe9, 0x8d, 0xf8, 0x61, 0x77, 0xb9, 0xbf, 0xc5, 0x2e, 0xb0,
	0x00, 0xe8, 0xc3, 0x41, 0xcb, 0xf9, 0xf6, 0xce, 0xb3, 0xd6, 0xc9, 0x1d, 0x2b, 0xb8, 0xb8, 0x70,
	0xfd, 0x51, 0x78, 0x77, 0x42, 0x82, 0x28, 0x40, 0xab, 0xe1, 0xc4, 0x25, 0xaf, 0x2f, 0xdc, 0x77,
	0xc6, 0xae, 0x94, 0x39, 0x7c, 0x3f, 0xc1, 0x5c, 0xc0, 0xfc, 0xad, 0x06, 0x0d, 0x07, 0xbf, 0x99,
	0xe2, 0x30, 0x7a, 0xee, 0x11, 0x8c, 0x6e, 0x41, 0x65, 0xec, 0x85, 0x91, 0xde, 0xbc, 0xa1, 0xed,
	0x37, 0xee, 0xef, 0xde, 0x15, 0xfa, 0x77, 0x29, 0xca, 0x05, 0x9f, 0x96, 0x1c, 0x26, 0x84, 0x1e,
	0xc1, 0xea, 0x4b, 0x8f, 0x5c, 0xbc, 0x75, 0x09, 0xd6, 0xd7, 0x98, 0xc2, 0x15, 0xa9, 0x20, 0x66,
	0xa4, 0x52, 0x22, 0x8c, 0x3e, 0x83, 0xfa, 0x2b, 0xec, 0x92, 0xe8, 0x14, 0xbb, 0x91, 0xbe, 0xce,
	0x34, 0x0d, 0xa9, 0x99, 0x4c, 0x49, 0x55, 0x29, 0x8e, 0x3e, 0x81, 0x15, 0x77, 0x34, 0x22, 0x38,
	0x0c, 0xf5, 0x0d, 0xa6, 0xa9, 0x4b, 0x4d, 0x3e, 0x21, 0xf5, 0x84, 0x28, 0xb2, 0xa0, 0x19, 0xe2,
	0x68, 0xe0, 0x12, 0xf7, 0x02, 0x47, 0x98, 0xe8, 0x9b, 0x4c, 0xf5, 0x5f, 0x52, 0x55, 0x9d, 0x95,
	0xfa, 0x29, 0x25, 0x6a, 0xe4, 0x5c, 0x35, 0xb2, 0x95, 0x35, 0x72, 0xbe, 0xd8, 0x88, 0x0a, 0xd3,
	0xa0, 0x85, 0x38, 0x9a, 0x04, 0x9e, 0x1f, 0xe9, 0x28, 0x1b, 0x34, 0x31, 0xa3, 0x04, 0x4d, 0x40,
	0x94, 0xf8, 0x59, 0xe0, 0xfb, 0xf8, 0x2c, 0xd2, 0xb7, 0xb3, 0xc4, 0xf9, 0x84, 0x42, 0x9c, 0x23,
	0xe8, 0x09, 0xc0, 0xc8, 0x0b, 0x85, 0xe2, 0x0e, 0x53, 0xbc, 0x2a, 0x15, 0xe5, 0x9c, 0xd4, 0x55,
	0x14, 0x68, 0x3e, 0x4c, 0x3c, 0xff, 0x5c, 0xdf, 0xcd, 0xe6, 0x03, 0x45, 0x95, 0x7c, 0xa0, 0x43,
	0x96, 0x0f, 0xc1, 0x78, 0x1c, 0xbc, 0xc5, 0x44, 0xdf, 0x9b, 0xcb, 0x07, 0x3e, 0xa3, 0xe6, 0x03,
	0x87, 0xe8, 0x5f, 0x4e, 0xa7, 0xc4, 0xd7, 0x2f, 0x67, 0xff, 0x42, 0x51, 0xe5, 0x2f, 0x74, 0x88,
	0xba, 0xb0, 0x36, 0x11, 0xd1, 0xec, 0xd1, 0x5c, 0xd5, 0x99, 0xd6, 0x75, 0xc5, 0x37, 0x75, 0x5a,
	0xaa, 0xa7, 0xd5, 0x68, 0x12, 0x8e, 0xc8, 0x6c, 0x18, 0xb9, 0xd1, 0x34, 0xd4, 0xaf, 0x64, 0x93,
	0xb0, 0xe3, 0x1c, 0xc7, 0x53, 0x4a, 0x12, 0x26, 0xe2, 0xed, 0x2a, 0x94, 0x09, 0x7e, 0x63, 0xfe,
	0x5a, 0x85, 0xa6, 0x83, 0xc3, 0x49, 0xe0, 0x87, 0x98, 0x95, 0xcf, 0x6d, 0xa8, 0x90, 0x20, 0x88,
	0xf4, 0x06, 0x33, 0xb7, 0x27, 0xcd, 0x51, 0x54, 0x48, 0x52, 0x26, 0x74, 0x4c, 0xa5, 0x95, 0x62,
	0xdb, 0xcb, 0x16, 0x9b, 0x94, 0x66, 0xd5, 0xf6, 0xe9, 0x5c, 0xb5, 0x19, 0x8b, 0xaa, 0x2d, 0xd1,
	0x92, 0xe5, 0xf6, 0x50, 0x96, 0xcc, 0x7a, 0x76, 0x59, 0x92, 0x92, 0x49, 0xf4, 0x92, 0x9a, 0x79,
	0x0c, 0xf5, 0x24, 0x62, 0xbc, 0xd6, 0xae, 0x2e, 0x08, 0xb2, 0xa2, 0x2a, 0xe5, 0x91, 0xad, 0xac,
	0x12, 0x23, 0x19, 0x57, 0xdc, 0xbf, 0x73, 0x57, 0x29, 0x31, 0x92, 0xd6, 0xa3, 0xb4, 0x93, 0x7a,
	0xd9, 0xca, 0xd2, 0x96, 0xf5, 0x22, 0x69, 0x27, 0x05, 0xf3, 0x50, 0x16, 0xcc, 0x5c, 0xa1, 0x25,
	0x49, 0x2f, 0x69, 0x8b, 0x94, 0xff, 0x22, 0x55, 0x31, 0x71, 0xa9, 0x5d, 0x5b, 0x5c, 0x31, 0x89,
	0xb2, 0x5a, 0x32, 0xb7, 0x79, 0xc9, 0xec, 0x64, 0x57, 0x35, 0x2e, 0x19, 0xb9, 0xaa, 0xac, 0x66,
	0x6e, 0xf3, 0xd4, 0xdf, 0xcd, 0x4a, 0xc7, 0xa9, 0x2f, 0xa5, 0x59, 0xee, 0x3f, 0x9e, 0xcf, 0xd9,
	0xab, 0x0b, 0x73, 0x56, 0x2e, 0x89, 0x4c, 0xda, 0x1a, 0x54, 0x08, 0x0e, 0x27, 0xe6, 0x3e, 0xac,
	0xa7, 0x6b, 0x1e, 0xed, 0x41, 0x6d, 0x84, 0x67, 0xde, 0x19, 0xd6, 0xb5, 0x1b, 0xda, 0x7e, 0xdd,
	0xe1, 0x23, 0xf3, 0x63, 0xd8, 0xc8, 0x70, 0x45, 0xd7, 0xa0, 0xce, 0x21, 0x3c, 0x62, 0xd2, 0xab,
	0x8e, 0x04, 0xcc, 0x5b, 0xb0, 0x35, 0xb7, 0xa3, 0xe4, 0x5a, 0xbf, 0x0f, 0x68, 0x3e, 0x98, 0x1f,
	0xf8, 0xc1, 0x7f, 0xa1, 0xa1, 0xec, 0x3c, 0xb9, 0xa6, 0x4f, 0xa0, 0xa9, 0x46, 0x1b, 0xdd, 0xe4,
	0x75, 0xa9, 0x2d, 0xab, 0x4b, 0x5e, 0x95, 0x29, 0x07, 0x2e, 0x65, 0x1d, 0x18, 0x40, 0x43, 0xd9,
	0x94, 0xd0, 0x47, 0x29, 0xc3, 0xbb, 0x69, 0xc3, 0xfc, 0x30, 0xe6, 0x76, 0xf7, 0xa0, 0x36, 0xc3,
	0xc4, 0x7b, 0xf9, 0x9e, 0x1b, 0xe5, 0x23, 0xd3, 0x81, 0xa6, 0xba, 0xd6, 0x85, 0x7c, 0xcd, 0xb3,
	0x79, 0x13, 0xd0, 0x59, 0xfc, 0xf3, 0x9e, 0xe7, 0x8b, 0x23, 0x18, 0xed, 0x40, 0x35, 0x8c, 0x46,
	0x9e, 0xcf, 0x83, 0x15, 0x0f, 0xcc, 0xaf, 0x60, 0x3b, 0x25, 0xcb, 0xdd, 0xd8, 0x83, 0x5a, 0x18,
	0x8d, 0x30, 0x21, 0x22, 0xb4, 0xf1, 0x88, 0xe3, 0xc1, 0x34, 0x62, 0xbf, 0x8c, 0xf1, 0x60, 0x1a,
	0x99, 0xcf, 0xa1, 0xa1, 0x70, 0xce, 0x5b, 0x19, 0x1a, 0xdd, 0xd7, 0x18, 0x4f, 0xdc, 0xb1, 0x37,
	0xc3, 0x22, 0xba, 0x09, 0x80, 0x10, 0x54, 0x5e, 0xe1, 0xf1, 0x44, 0x2f, 0xb3, 0x09, 0xf6, 0x6d,
	0x76, 0xa0, 0xa9, 0x32, 0x47, 0xd7, 0x01, 0x28, 0x3e, 0x8c, 0x08, 0xad, 0xb2, 0xd8, 0xba, 0x82,
	0x50, 0x96, 0x98, 0x90, 0x80, 0x70, 0xff, 0xe2, 0x81, 0xf9, 0x0d, 0x34, 0x94, 0x16, 0xa6, 0xc8,
	0xba, 0x6d, 0x42, 0xd9, 0x1d, 0x8f, 0xb9, 0xaf, 0xf4, 0xd3, 0xfc, 0x4e, 0x83, 0xa6, 0xba, 0x45,
	0x53, 0x97, 0x62, 0x7a, 0xec, 0x3c, 0xd2, 0x6e, 0x94, 0xa9, 0x4b, 0x12, 0x41, 0xff, 0x81, 0xb5,
	0x78, 0xd4, 0xc1, 0x91, 0xeb, 0x8d, 0x43, 0xfd, 0x12, 0x13, 0x49, 0x83, 0xc9, 0xc2, 0x97, 0x3f,
	0xbc, 0xf0, 0xe6, 0x09, 0x6c, 0x64, 0x1a, 0xac, 0x22, 0x94, 0x0c, 0x7a, 0x94, 0x8c, 0xb1, 0xef,
	0x5e, 0x60, 0x1e, 0xa5, 0x64, 0x6c, 0x9e, 0xc0, 0x66, 0xf6, 0x30, 0x41, 0x3a, 0xac, 0xcc, 0x30,
	0x09, 0xbd, 0x40, 0xa4, 0x8e, 0x18, 0x16, 0xf2, 0xf9, 0x08, 0x36, 0xb3, 0xad, 0x5d, 0xc1, 0xfa,
	0xc1, 0xbe, 0x7b, 0x3a, 0x16, 0x69, 0xc3, 0x47, 0xe6, 0x11, 0xac, 0xa7, 0xfb, 0xbe, 0x22, 0x46,
	0x75, 0x79, 0x34, 0x52, 0xab, 0x6b, 0xc9, 0xe9, 0x67, 0xfe, 0xa4, 0xc1, 0x46, 0xe6, 0x70, 0x44,
	0xff, 0x83, 0xf5, 0xb3, 0x29, 0x21, 0xd8, 0x8f, 0x5a, 0x5c, 0x49, 0x63, 0x4a, 0x19, 0x14, 0xed,
	0xc3, 0xc6, 0x84, 0xe0, 0x99, 0x17, 0x4c, 0xc3, 0x56, 0xca, 0x7a, 0x16, 0x2e, 0x14, 0xbf, 0x1f,
	0x35, 0xd8, 0x5e, 0xd0, 0xa6, 0x16, 0xa1, 0xfb, 0x40, 0x3d, 0xd2, 0xa9, 0x4b, 0xeb, 0xaa, 0xfc,
	0x59, 0xe0, 0xbf, 0xf4, 0xce, 0x99, 0x7d, 0xf5, 0x28, 0xdf, 0x81, 0xea, 0xcc, 0x1d, 0x4f, 0x31,
	0x73, 0xb2, 0xee, 0xc4, 0x03, 0x73, 0x0a, 0xdb, 0xe7, 0xff, 0xbc, 0x33, 0xe6, 0x2f, 0x1a, 0x6c,
	0xcd, 0xb5, 0x1e, 0xd2, 0x45, 0x4d, 0x71, 0x11, 0xfd, 0x1f, 0x2a, 0xd1, 0xfb, 0x09, 0xe6, 0xb6,
	0xb7, 0x33, 0xad, 0x07, 0xbd, 0x06, 0x39, 0x4c, 0x00, 0xdd, 0xa1, 0x7b, 0x1a, 0x3b, 0x53, 0xcb,
	0x59, 0x37, 0x98, 0x28, 0x3f, 0x55, 0xb9, 0x50, 0xb2, 0x68, 0x95, 0xbf, 0xb1, 0x68, 0x2d, 0xd8,
	0x59, 0xd4, 0x8e, 0x16, 0x88, 0x93, 0xf9, 0x83, 0x06, 0xbb, 0x0b, 0x9b, 0x25, 0xba, 0x99, 0xca,
	0x08, 0xc6, 0xdb, 0x8e, 0xb2, 0x6e, 0x92, 0x7e, 0x79, 0x39, 0xfd, 0x22, 0x49, 0x38, 0x81, 0x8d,
	0xcc, 0x25, 0xa5, 0xe0, 0xc6, 0x93, 0x34, 0x73, 0x74, 0x55, 0x2e, 0x29, 0xed, 0x9a, 0xac, 0xef,
	0x72, 0xaa, 0xbe, 0xdf, 0xc1, 0x66, 0xb6, 0xcd, 0x4b, 0xd9, 0xd1, 0x32, 0x76, 0xae, 0x41, 0xdd,
	0x0b, 0x9d, 0xa9, 0xef, 0xd3, 0xe3, 0x81, 0x9f, 0x30, 0x09, 0x50, 0x88, 0xeb, 0xf7, 0x1a, 0x6c,
	0x64, 0xae, 0x2d, 0x45, 0xc8, 0x5e, 0x07, 0x10, 0xda, 0xde, 0x88, 0x6f, 0x00, 0x0a, 0x42, 0x77,
	0x13, 0x31, 0x8a, 0x93, 0x9d, 0x39, 0xb5, 0xe6, 0x64, 0x50, 0xf3, 0x09, 0x6c, 0x66, 0x6f, 0x23,
	0x45, 0xd2, 0xe7, 0x67, 0x0d, 0xb6, 0xe6, 0x3a, 0x43, 0xb4, 0x4f, 0x7b, 0x01, 0x37, 0xba, 0xc7,
	0x2d, 0xa0, 0xb9, 0x2e, 0xf2, 0x9e, 0x13, 0x0b, 0x08, 0xc9, 0x03, 0xc6, 0x60, 0x91, 0xe4, 0x41,
	0x2c, 0x79, 0x50, 0x28, 0xb6, 0x7f, 0x6a, 0xb0, 0x2a, 0xfe, 0x84, 0x76, 0xa1, 0x76, 0xdc, 0x19,
	0xbe, 0xe8, 0x59, 0xbc, 0xe1, 0xab, 0x1e, 0x77, 0x86, 0x3d, 0x4b, 0xc0, 0x4f, 0x2d, 0xbe, 0x8c,
	0x14, 0x7e, 0x9a, 0xc0, 0xbd, 0x36, 0x4f, 0x14, 0x26, 0xdd, 0x4e, 0xa4, 0xdb, 0xac, 0x2e, 0xb9,
	0x74, 0x02, 0xf7, 0x5a, 0x7a, 0x55, 0x4a, 0xb7, 0x12, 0xe9, 0x96, 0x5e, 0x93, 0xd2, 0x2d, 0xda,
	0x80, 0xf4, 0x0f, 0x87, 0x1d, 0x7d, 0x25, 0x6e, 0x40, 0xe8, 0x37, 0xc5, 0x8e, 0x8e, 0x7b, 0x7d,
	0x7d, 0x35, 0xc6, 0xe8, 0x37, 0x6d, 0x0a, 0xec, 0x4e, 0x57, 0xaf, 0xc7, 0x4d, 0x81, 0xdd, 0xe9,
	0xa2, 0xcb, 0xb0, 0x42, 0x0d, 0xf6, 0xad, 0x81, 0x0e, 0x71, 0xfe, 0x1e, 0x77, 0x86, 0x7d, 0x6b,
	0x40, 0xf7, 0xa6, 0x6e, 0xeb, 0xa8, 0x77, 0xc8, 0x2e, 0x85, 0xab, 0x4e, 0x3c, 0x30, 0x7f, 0x97,
	0xfc, 0x0f, 0x98, 0x33, 0x76, 0x8a, 0xbf, 0x2d, 0xf8, 0xdb, 0x29, 0xfe, 0xb6, 0xe0, 0x6f, 0xa7,
	0xf8, 0xdb, 0x82, 0xbf, 0x9d, 0xe2, 0x6f, 0x0b, 0xfe, 0x76, 0x8a, 0xbf, 0x2d, 0xf8, 0xdb, 0x29,
	0xfe, 0x36, 0xe7, 0x6f, 0x0d, 0x8e, 0x8e, 0x05, 0x7f, 0xfa, 0x4d, 0xb9, 0xf6, 0x0f, 0x9f, 0x73,
	0xfa, 0xf4, 0x13, 0x6d, 0x43, 0x75, 0x68, 0xbd, 0xe8, 0x5b, 0x9c, 0x7f, 0x65, 0x68, 0xf5, 0x2d,
	0x06, 0xb6, 0x29, 0x08, 0x1c, 0x6c, 0x73, 0xb0, 0x45, 0xc1, 0x06, 0x07, 0x5b, 0x7d, 0xeb, 0xfe,
	0x1f, 0x55, 0x58, 0x67, 0xb9, 0xf1, 0xcc, 0x7d, 0x37, 0xc4, 0x64, 0x86, 0x09, 0xfa, 0x12, 0x56,
	0x2c, 0x7e, 0x7f, 0xca, 0x7d, 0xd6, 0x30, 0xf2, 0xef, 0x6f, 0x66, 0x09, 0x7d, 0x0d, 0xd0, 0x91,
	0x97, 0xb0, 0x65, 0x4f, 0x1c, 0xc6, 0xd2, 0xdb, 0x9c, 0x59, 0x42, 0x8f, 0xa0, 0x32, 0xa0, 0x7b,
	0xc5, 0xe2, 0xe7, 0x0e, 0x23, 0xe7, 0x4a, 0x17, 0x2b, 0xb2, 0x7e, 0x6f, 0xf1, 0xbb, 0x99, 0x91,
	0x73, 0xc3, 0x37, 0x4b, 0xc8, 0x82, 0xd5, 0xae, 0xb8, 0xad, 0xe7, 0xbf, 0xa1, 0x19, 0x4b, 0x2e,
	0xfc, 0x66, 0x09, 0xf5, 0xa0, 0x39, 0x54, 0x5f, 0x9a, 0x96, 0xbf, 0x6e, 0x19, 0xcb, 0xee, 0xf2,
	0xb1, 0x35, 0x3b, 0xc7, 0xda, 0x79, 0x71, 0x6b, 0x9f, 0x43, 0xbd, 0x3d, 0x25, 0x7e, 0x77, 0xec,
	0x86, 0xaf, 0xd0, 0xe2, 0x07, 0x1e, 0x23, 0xe7, 0xf2, 0x1b, 0x87, 0x67, 0x28, 0xb6, 0xf7, 0xfc,
	0xd7, 0x32, 0x63, 0xc9, 0xc3, 0x80, 0x59, 0x42, 0x4f, 0xa0, 0xd6, 0x65, 0x1b, 0x2b, 0xca, 0x7f,
	0x95, 0x32, 0x72, 0x36, 0x2d, 0xb3, 0x84, 0xba, 0x50, 0x4f, 0x76, 0x51, 0xb4, 0xe4, 0xa1, 0xc8,
	0x58, 0x76, 0x21, 0x37, 0x4b, 0xa7, 0x35, 0xf6, 0xf0, 0xfa, 0xe0, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x28, 0x5f, 0x0e, 0x58, 0xb5, 0x15, 0x00, 0x00,
}
