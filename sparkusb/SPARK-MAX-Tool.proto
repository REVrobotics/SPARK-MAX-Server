syntax = "proto3";

package sparkmax;

import "SPARK-MAX-Commands.proto";

/* Interface functions for service sparkusb.
* All command requests are serialized into a 
* RequestWire type before transmission, and
* Deserializezd to a ResponseWire on recipt
*/
service sparkusb {
    /*
    * Connect to the requested serial port. If no port
    * is provided, connect to the default port, which is 
    * the first port found with a SPARK device.
    */
    rpc Connect(controlRequest) returns (controlResponse) {}

    /*
    * Disconnect the serial port
    */
    rpc Disconnect(controlRequest) returns (controlResponse) {}

    /*
    * Ping the SPARK to verify connection to the hardware and to
    * this server.
    */
    rpc Ping(controlRequest) returns (controlResponse){}

    /*
    * List the serial port information for all connected
    * SPARK devices.
    */
    rpc List(listRequest) returns (listResponse) {}

    /*
    * Update the firmware of the device
    */
    //rpc Firmware(firmwareRequest) returns (firmwareResponse) {}

    /*
    * Send a Heartbeat to the SPARK device (similar to how the roboRIO
    * heartbeat to the device over CAN). This message can be simplified
    * if driving the motor by calling Setpoint({Enable: true})
    */
    rpc Heartbeat(heartbeatRequest) returns (rootResponse) {}

    /*
    * Change the SPARK address. Currently done through SetParameter()
    */
    //rpc Address(addressRequest) returns (addressResponse) {}

    /*
    * Set a device parameter. The parameter should be configParam type
    * the value is a string in both the request and response.
    */
    rpc SetParameter(parameterRequest) returns (parameterResponse) {}

    /*
    * Get a device parameter. The parameter should be configParam type
    * the value returned is a string in both the request and response.
    * The requested value type is also passed to help decode. The type
    * is of type paramType
    */
    rpc GetParameter(parameterRequest) returns (parameterResponse) {}

    /*
    * Make all configuration changes permanent for the next time the 
    * device powers on. Note: This writes any values that have changed
    * and can only be called when the device is not enabled. Since this
    * method writes directly to FLASH, avoid calling frequently, as each
    * flash location can be written to a total of 10,000 times in its lifetime.
    * Flash wear leveling is being implemented and should be in the release
    * before kickoff
    */
    rpc BurnFlash(burnRequest) returns (burnResponse) {}

    /*
    * Return a list of all available parameters with their name, number, and type
    */
    //rpc ListParameters(parameterListRequest) returns (parameterListResponse) {}

    /*
    * Send a setpoint command. The value should be native units depending
    * on the curernt control mode (+/- 1.0 for duty cycle control)
    * Setting Enable = true will also send a heartbeat allowing the controller
    * drive the motor.
    */
    rpc Setpoint(setpointRequest) returns (setpointResponse) {}

    /*
    * Set controller to follow another controller.
    */
    rpc Follow(followerRequest) returns (rootResponse) {}
}

/*
* Data format to send over 0mq containing one request
*/
message RequestWire {
    oneof req {
        rootCommand             root = 10;
        commandLineRequest      cmdLine = 11;
        listRequest             list = 12;
        firmwareRequest         firmware = 13;
        heartbeatRequest        heartbeat = 14;
        addressRequest          address = 15;
        parameterRequest        parameter = 16;
        parameterListRequest    parameterList = 17;
        setpointRequest         setpoint = 18;
        controlRequest          control = 19;
        followerRequest         follower = 20;
        burnRequest             burn = 21;
    }
}

/*
* Data format to recieve over 0mq containting one response
*/
message ResponseWire {
    oneof resp {
        rootResponse            root = 10;
        commandLineResponse     cmdLine = 11;
        listResponse            list = 12;
        firmwareResponse        firmware = 13;
        addressResponse         address = 14;
        parameterResponse       parameter = 15;
        parameterListResponse   parameterlist = 16;
        setpointResponse        setpoint = 17;
        controlResponse         control = 18;
        burnResponse            burn = 19;
    }
}