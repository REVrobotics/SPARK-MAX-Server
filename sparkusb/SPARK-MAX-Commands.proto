syntax = "proto3";

package sparkmax;

import "SPARK-MAX-Types.proto";

/*
* Types of control message to send
*/
enum controlMessage {
    controlPing = 0;
    controlConnect = 1;
    controlDisconnect = 2;
}

/*
* Request format for connect() disconnect() and ping()
*/
message controlRequest {
    controlMessage ctrl = 1;
    string device = 2;
}

/*
* Burn command
*/
message burnRequest {
    rootCommand root = 1;
    bool verify = 2;
}


message burnResponse {    
    rootResponse root = 1;
    bool verify = 2;
}

/*
* Response format for connect() disconnect() and ping()
*/
message controlResponse {
    bool connected = 1;
}


message commandLineRequest {
    string stdin = 1;
}

message commandLineResponse {
    string stderr = 1;
    string stdout = 2;
}

/*
* All RPC services implement this request
* keepalive and help are not implemented
*/
message rootCommand {
    string device = 1;
    bool keepalive = 2;
    bool help = 3;
}

/*
* All RPC services implement this response
* helpString not implemented
*/
message rootResponse {
    string helpString = 1;
    string error = 2;
}

/*
* Request format for list() command
*/
message listRequest {
    rootCommand root = 1;
    bool all = 2; 
}

/*
* Response format for list() command
*/
message listResponse {
    repeated string deviceList = 1;
    repeated string deviceDetails = 2;
    rootResponse root = 3;
}

/*
* Request format for firmware() command
*/
message firmwareRequest {
    rootCommand root = 1;
    string filename = 2;
}

/*
* Response format for list() command
*/
message firmwareResponse {
    string version = 1;
    rootResponse root = 3;
}

/*
* Request format for heartbeat() command
*/
message heartbeatRequest {
    rootCommand root = 1;
    bool enable = 2;
}

/*
* Request format for address() command
*/
message addressRequest {
    rootCommand root = 1;
    uint32 address = 2;
}

/*
* Response format for address() command
*/
message addressResponse {
    uint32 currentAddress = 1;
    uint32 previousAddress = 2;
    rootResponse root = 3;
}

/*
* Request type for Set/Get Parameter()
* value is not set to signify a 'Get' command
*/
message parameterRequest { 
    rootCommand root = 1;
    configParam parameter = 2;
    string value = 3;
}

/*
* Response type for Set/Get Parameter()
*/
message parameterResponse {
    string value = 1;
    paramType type = 2;
    rootResponse root = 4;
}

message parameterListRequest { 
    rootCommand root = 1;  
}

message parameterListResponse {
    repeated string parameter = 1;
    repeated paramType type = 2;
    rootResponse root = 3;
}

/*
* Request format for Setpoint() command
*/
message setpointRequest {
    rootCommand root = 1;  
    float setpoint = 2;
    bool enable = 3;
}

/*
* Response format for Setpoint() command
* isRunning is not implemented yet
*/
message setpointResponse {
    float setpoint = 1;
    bool isRunning = 2;
    rootResponse root = 3;
}

message followerRequest {
    rootCommand root = 1;
    uint32 followerid = 2;
    uint32 followerconfig = 3;
}
