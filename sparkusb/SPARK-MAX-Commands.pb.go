// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SPARK-MAX-Commands.proto

/*
Package sparkmax is a generated protocol buffer package.

It is generated from these files:
	SPARK-MAX-Commands.proto

It has these top-level messages:
	ControlRequest
	BurnRequest
	BurnResponse
	ControlResponse
	CommandLineRequest
	CommandLineResponse
	RootCommand
	RootResponse
	ListRequest
	ListResponse
	FirmwareRequest
	FirmwareResponse
	HeartbeatRequest
	AddressRequest
	AddressResponse
	ParameterRequest
	ParameterResponse
	ParameterListRequest
	ParameterListResponse
	SetpointRequest
	SetpointResponse
	FollowerRequest
*/
package sparkmax

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sparkmax1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Types of control message to send
type ControlMessage int32

const (
	ControlMessage_controlPing       ControlMessage = 0
	ControlMessage_controlConnect    ControlMessage = 1
	ControlMessage_controlDisconnect ControlMessage = 2
)

var ControlMessage_name = map[int32]string{
	0: "controlPing",
	1: "controlConnect",
	2: "controlDisconnect",
}
var ControlMessage_value = map[string]int32{
	"controlPing":       0,
	"controlConnect":    1,
	"controlDisconnect": 2,
}

func (x ControlMessage) String() string {
	return proto.EnumName(ControlMessage_name, int32(x))
}
func (ControlMessage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// Request format for connect() disconnect() and ping()
type ControlRequest struct {
	Ctrl   ControlMessage `protobuf:"varint,1,opt,name=ctrl,enum=sparkmax.ControlMessage" json:"ctrl,omitempty"`
	Device string         `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *ControlRequest) Reset()                    { *m = ControlRequest{} }
func (m *ControlRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlRequest) ProtoMessage()               {}
func (*ControlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ControlRequest) GetCtrl() ControlMessage {
	if m != nil {
		return m.Ctrl
	}
	return ControlMessage_controlPing
}

func (m *ControlRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

//
// Burn command
type BurnRequest struct {
	Root   *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Verify bool         `protobuf:"varint,2,opt,name=verify" json:"verify,omitempty"`
}

func (m *BurnRequest) Reset()                    { *m = BurnRequest{} }
func (m *BurnRequest) String() string            { return proto.CompactTextString(m) }
func (*BurnRequest) ProtoMessage()               {}
func (*BurnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BurnRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *BurnRequest) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

type BurnResponse struct {
	Root   *RootResponse `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Verify bool          `protobuf:"varint,2,opt,name=verify" json:"verify,omitempty"`
}

func (m *BurnResponse) Reset()                    { *m = BurnResponse{} }
func (m *BurnResponse) String() string            { return proto.CompactTextString(m) }
func (*BurnResponse) ProtoMessage()               {}
func (*BurnResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BurnResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *BurnResponse) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

//
// Response format for connect() disconnect() and ping()
type ControlResponse struct {
	Connected bool `protobuf:"varint,1,opt,name=connected" json:"connected,omitempty"`
}

func (m *ControlResponse) Reset()                    { *m = ControlResponse{} }
func (m *ControlResponse) String() string            { return proto.CompactTextString(m) }
func (*ControlResponse) ProtoMessage()               {}
func (*ControlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ControlResponse) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

type CommandLineRequest struct {
	Stdin string `protobuf:"bytes,1,opt,name=stdin" json:"stdin,omitempty"`
}

func (m *CommandLineRequest) Reset()                    { *m = CommandLineRequest{} }
func (m *CommandLineRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandLineRequest) ProtoMessage()               {}
func (*CommandLineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommandLineRequest) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

type CommandLineResponse struct {
	Stderr string `protobuf:"bytes,1,opt,name=stderr" json:"stderr,omitempty"`
	Stdout string `protobuf:"bytes,2,opt,name=stdout" json:"stdout,omitempty"`
}

func (m *CommandLineResponse) Reset()                    { *m = CommandLineResponse{} }
func (m *CommandLineResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandLineResponse) ProtoMessage()               {}
func (*CommandLineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CommandLineResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *CommandLineResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

//
// All RPC services implement this request
// keepalive and help are not implemented
type RootCommand struct {
	Device    string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Keepalive bool   `protobuf:"varint,2,opt,name=keepalive" json:"keepalive,omitempty"`
	Help      bool   `protobuf:"varint,3,opt,name=help" json:"help,omitempty"`
}

func (m *RootCommand) Reset()                    { *m = RootCommand{} }
func (m *RootCommand) String() string            { return proto.CompactTextString(m) }
func (*RootCommand) ProtoMessage()               {}
func (*RootCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RootCommand) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *RootCommand) GetKeepalive() bool {
	if m != nil {
		return m.Keepalive
	}
	return false
}

func (m *RootCommand) GetHelp() bool {
	if m != nil {
		return m.Help
	}
	return false
}

//
// All RPC services implement this response
// helpString not implemented
type RootResponse struct {
	HelpString string `protobuf:"bytes,1,opt,name=helpString" json:"helpString,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *RootResponse) Reset()                    { *m = RootResponse{} }
func (m *RootResponse) String() string            { return proto.CompactTextString(m) }
func (*RootResponse) ProtoMessage()               {}
func (*RootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RootResponse) GetHelpString() string {
	if m != nil {
		return m.HelpString
	}
	return ""
}

func (m *RootResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

//
// Request format for list() command
type ListRequest struct {
	Root *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	All  bool         `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

//
// Response format for list() command
type ListResponse struct {
	DeviceList    []string      `protobuf:"bytes,1,rep,name=deviceList" json:"deviceList,omitempty"`
	DeviceDetails []string      `protobuf:"bytes,2,rep,name=deviceDetails" json:"deviceDetails,omitempty"`
	Root          *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListResponse) GetDeviceList() []string {
	if m != nil {
		return m.DeviceList
	}
	return nil
}

func (m *ListResponse) GetDeviceDetails() []string {
	if m != nil {
		return m.DeviceDetails
	}
	return nil
}

func (m *ListResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for firmware() command
type FirmwareRequest struct {
	Root     *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Filename string       `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *FirmwareRequest) Reset()                    { *m = FirmwareRequest{} }
func (m *FirmwareRequest) String() string            { return proto.CompactTextString(m) }
func (*FirmwareRequest) ProtoMessage()               {}
func (*FirmwareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FirmwareRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *FirmwareRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

//
// Response format for list() command
type FirmwareResponse struct {
	Version string        `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Root    *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *FirmwareResponse) Reset()                    { *m = FirmwareResponse{} }
func (m *FirmwareResponse) String() string            { return proto.CompactTextString(m) }
func (*FirmwareResponse) ProtoMessage()               {}
func (*FirmwareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FirmwareResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FirmwareResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for heartbeat() command
type HeartbeatRequest struct {
	Root   *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Enable bool         `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HeartbeatRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *HeartbeatRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

//
// Request format for address() command
type AddressRequest struct {
	Root    *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Address uint32       `protobuf:"varint,2,opt,name=address" json:"address,omitempty"`
}

func (m *AddressRequest) Reset()                    { *m = AddressRequest{} }
func (m *AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()               {}
func (*AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddressRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *AddressRequest) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

//
// Response format for address() command
type AddressResponse struct {
	CurrentAddress  uint32        `protobuf:"varint,1,opt,name=currentAddress" json:"currentAddress,omitempty"`
	PreviousAddress uint32        `protobuf:"varint,2,opt,name=previousAddress" json:"previousAddress,omitempty"`
	Root            *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *AddressResponse) Reset()                    { *m = AddressResponse{} }
func (m *AddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AddressResponse) ProtoMessage()               {}
func (*AddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddressResponse) GetCurrentAddress() uint32 {
	if m != nil {
		return m.CurrentAddress
	}
	return 0
}

func (m *AddressResponse) GetPreviousAddress() uint32 {
	if m != nil {
		return m.PreviousAddress
	}
	return 0
}

func (m *AddressResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request type for Set/Get Parameter()
// value is not set to signify a 'Get' command
type ParameterRequest struct {
	Root      *RootCommand          `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Parameter sparkmax1.ConfigParam `protobuf:"varint,2,opt,name=parameter,enum=sparkmax.ConfigParam" json:"parameter,omitempty"`
	Value     string                `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *ParameterRequest) Reset()                    { *m = ParameterRequest{} }
func (m *ParameterRequest) String() string            { return proto.CompactTextString(m) }
func (*ParameterRequest) ProtoMessage()               {}
func (*ParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ParameterRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *ParameterRequest) GetParameter() sparkmax1.ConfigParam {
	if m != nil {
		return m.Parameter
	}
	return sparkmax1.ConfigParam_kCanID
}

func (m *ParameterRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//
// Response type for Set/Get Parameter()
type ParameterResponse struct {
	Value string              `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Type  sparkmax1.ParamType `protobuf:"varint,2,opt,name=type,enum=sparkmax.ParamType" json:"type,omitempty"`
	Root  *RootResponse       `protobuf:"bytes,4,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterResponse) Reset()                    { *m = ParameterResponse{} }
func (m *ParameterResponse) String() string            { return proto.CompactTextString(m) }
func (*ParameterResponse) ProtoMessage()               {}
func (*ParameterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ParameterResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ParameterResponse) GetType() sparkmax1.ParamType {
	if m != nil {
		return m.Type
	}
	return sparkmax1.ParamType_int32
}

func (m *ParameterResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type ParameterListRequest struct {
	Root *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterListRequest) Reset()                    { *m = ParameterListRequest{} }
func (m *ParameterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ParameterListRequest) ProtoMessage()               {}
func (*ParameterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ParameterListRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

type ParameterListResponse struct {
	Parameter []string              `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	Type      []sparkmax1.ParamType `protobuf:"varint,2,rep,packed,name=type,enum=sparkmax.ParamType" json:"type,omitempty"`
	Root      *RootResponse         `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *ParameterListResponse) Reset()                    { *m = ParameterListResponse{} }
func (m *ParameterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ParameterListResponse) ProtoMessage()               {}
func (*ParameterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ParameterListResponse) GetParameter() []string {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *ParameterListResponse) GetType() []sparkmax1.ParamType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ParameterListResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

//
// Request format for Setpoint() command
type SetpointRequest struct {
	Root     *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Setpoint float32      `protobuf:"fixed32,2,opt,name=setpoint" json:"setpoint,omitempty"`
	Enable   bool         `protobuf:"varint,3,opt,name=enable" json:"enable,omitempty"`
}

func (m *SetpointRequest) Reset()                    { *m = SetpointRequest{} }
func (m *SetpointRequest) String() string            { return proto.CompactTextString(m) }
func (*SetpointRequest) ProtoMessage()               {}
func (*SetpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SetpointRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *SetpointRequest) GetSetpoint() float32 {
	if m != nil {
		return m.Setpoint
	}
	return 0
}

func (m *SetpointRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

//
// Response format for Setpoint() command
// isRunning is not implemented yet
type SetpointResponse struct {
	Setpoint  float32       `protobuf:"fixed32,1,opt,name=setpoint" json:"setpoint,omitempty"`
	IsRunning bool          `protobuf:"varint,2,opt,name=isRunning" json:"isRunning,omitempty"`
	Root      *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *SetpointResponse) Reset()                    { *m = SetpointResponse{} }
func (m *SetpointResponse) String() string            { return proto.CompactTextString(m) }
func (*SetpointResponse) ProtoMessage()               {}
func (*SetpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SetpointResponse) GetSetpoint() float32 {
	if m != nil {
		return m.Setpoint
	}
	return 0
}

func (m *SetpointResponse) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *SetpointResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type FollowerRequest struct {
	Root           *RootCommand `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
	Followerid     uint32       `protobuf:"varint,2,opt,name=followerid" json:"followerid,omitempty"`
	Followerconfig uint32       `protobuf:"varint,3,opt,name=followerconfig" json:"followerconfig,omitempty"`
}

func (m *FollowerRequest) Reset()                    { *m = FollowerRequest{} }
func (m *FollowerRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowerRequest) ProtoMessage()               {}
func (*FollowerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FollowerRequest) GetRoot() *RootCommand {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *FollowerRequest) GetFollowerid() uint32 {
	if m != nil {
		return m.Followerid
	}
	return 0
}

func (m *FollowerRequest) GetFollowerconfig() uint32 {
	if m != nil {
		return m.Followerconfig
	}
	return 0
}

func init() {
	proto.RegisterType((*ControlRequest)(nil), "sparkmax.controlRequest")
	proto.RegisterType((*BurnRequest)(nil), "sparkmax.burnRequest")
	proto.RegisterType((*BurnResponse)(nil), "sparkmax.burnResponse")
	proto.RegisterType((*ControlResponse)(nil), "sparkmax.controlResponse")
	proto.RegisterType((*CommandLineRequest)(nil), "sparkmax.commandLineRequest")
	proto.RegisterType((*CommandLineResponse)(nil), "sparkmax.commandLineResponse")
	proto.RegisterType((*RootCommand)(nil), "sparkmax.rootCommand")
	proto.RegisterType((*RootResponse)(nil), "sparkmax.rootResponse")
	proto.RegisterType((*ListRequest)(nil), "sparkmax.listRequest")
	proto.RegisterType((*ListResponse)(nil), "sparkmax.listResponse")
	proto.RegisterType((*FirmwareRequest)(nil), "sparkmax.firmwareRequest")
	proto.RegisterType((*FirmwareResponse)(nil), "sparkmax.firmwareResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "sparkmax.heartbeatRequest")
	proto.RegisterType((*AddressRequest)(nil), "sparkmax.addressRequest")
	proto.RegisterType((*AddressResponse)(nil), "sparkmax.addressResponse")
	proto.RegisterType((*ParameterRequest)(nil), "sparkmax.parameterRequest")
	proto.RegisterType((*ParameterResponse)(nil), "sparkmax.parameterResponse")
	proto.RegisterType((*ParameterListRequest)(nil), "sparkmax.parameterListRequest")
	proto.RegisterType((*ParameterListResponse)(nil), "sparkmax.parameterListResponse")
	proto.RegisterType((*SetpointRequest)(nil), "sparkmax.setpointRequest")
	proto.RegisterType((*SetpointResponse)(nil), "sparkmax.setpointResponse")
	proto.RegisterType((*FollowerRequest)(nil), "sparkmax.followerRequest")
	proto.RegisterEnum("sparkmax.ControlMessage", ControlMessage_name, ControlMessage_value)
}

func init() { proto.RegisterFile("SPARK-MAX-Commands.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x4f, 0xe3, 0x38,
	0x14, 0xde, 0xb4, 0x5d, 0x68, 0x5f, 0xa1, 0x0d, 0x81, 0xa2, 0x08, 0x21, 0x84, 0xa2, 0xd5, 0x2e,
	0x8b, 0x16, 0x56, 0x82, 0xbf, 0xa0, 0x82, 0xbd, 0xec, 0x16, 0xa9, 0x32, 0xcb, 0x0c, 0x57, 0x37,
	0x79, 0x2d, 0x16, 0xa9, 0x9d, 0xb1, 0xdd, 0x02, 0x97, 0xd1, 0x1c, 0xe6, 0x30, 0x9a, 0xcb, 0xfc,
	0xcb, 0xa3, 0x38, 0xce, 0x8f, 0xf6, 0x02, 0xe4, 0xd6, 0xef, 0xeb, 0xe7, 0xcf, 0xef, 0x7d, 0xf1,
	0x73, 0x02, 0xfe, 0xed, 0x78, 0x48, 0xfe, 0x3b, 0xbb, 0x19, 0xde, 0x9f, 0x5d, 0x89, 0xf9, 0x9c,
	0xf2, 0x48, 0x9d, 0x27, 0x52, 0x68, 0xe1, 0xb5, 0x55, 0x42, 0xe5, 0xe3, 0x9c, 0x3e, 0x1f, 0x0c,
	0x4a, 0xcd, 0xff, 0x2f, 0x09, 0x5a, 0x41, 0xf0, 0x01, 0x7a, 0xa1, 0xe0, 0x5a, 0x8a, 0x98, 0xe0,
	0xa7, 0x05, 0x2a, 0xed, 0xfd, 0x05, 0xad, 0x50, 0xcb, 0xd8, 0x77, 0x8e, 0x9d, 0x93, 0xde, 0x85,
	0x7f, 0x9e, 0x3b, 0x9c, 0x5b, 0xdd, 0x0d, 0x2a, 0x45, 0x67, 0x48, 0x8c, 0xca, 0xdb, 0x87, 0x8d,
	0x08, 0x97, 0x2c, 0x44, 0xbf, 0x71, 0xec, 0x9c, 0x74, 0x88, 0x45, 0xc1, 0x18, 0xba, 0x93, 0x85,
	0xe4, 0xb9, 0xe9, 0x9f, 0xd0, 0x92, 0x42, 0x68, 0x63, 0xda, 0xbd, 0x18, 0x94, 0xa6, 0x29, 0x6b,
	0x6b, 0x26, 0x46, 0x92, 0x3a, 0x2e, 0x51, 0xb2, 0xe9, 0x8b, 0x71, 0x6c, 0x13, 0x8b, 0x02, 0x02,
	0x5b, 0x99, 0xa3, 0x4a, 0x04, 0x57, 0xe8, 0x9d, 0xae, 0x58, 0xee, 0xaf, 0x5a, 0xe6, 0xaa, 0x57,
	0x3c, 0xff, 0x86, 0x7e, 0xd1, 0xbd, 0xb5, 0x3d, 0x84, 0x4e, 0x28, 0x38, 0xc7, 0x50, 0x63, 0x64,
	0xbc, 0xdb, 0xa4, 0x24, 0x82, 0x53, 0xf0, 0xc2, 0xac, 0xda, 0x11, 0xe3, 0x98, 0x77, 0xb7, 0x07,
	0xbf, 0x2a, 0x1d, 0x31, 0x6e, 0xf4, 0x1d, 0x92, 0x81, 0xe0, 0x1f, 0xd8, 0x5d, 0xd1, 0xda, 0x0d,
	0xf6, 0x61, 0x43, 0xe9, 0x08, 0xa5, 0xb4, 0x6a, 0x8b, 0x2c, 0x2f, 0x16, 0x3a, 0x4f, 0x32, 0x43,
	0xc1, 0x47, 0xe8, 0x56, 0x42, 0xaa, 0x04, 0xee, 0x54, 0x03, 0x4f, 0xeb, 0x7e, 0x44, 0x4c, 0x68,
	0xcc, 0x96, 0x68, 0xbb, 0x2c, 0x09, 0xcf, 0x83, 0xd6, 0x03, 0xc6, 0x89, 0xdf, 0x34, 0x7f, 0x98,
	0xdf, 0xc1, 0x35, 0x6c, 0x55, 0xa3, 0xf2, 0x8e, 0x00, 0x52, 0xfe, 0x56, 0x4b, 0xc6, 0x67, 0xd6,
	0xbd, 0xc2, 0xa4, 0x5d, 0xa2, 0x94, 0x42, 0xda, 0xfa, 0x32, 0x10, 0xfc, 0x0b, 0xdd, 0x98, 0x29,
	0x5d, 0xe3, 0x41, 0xbb, 0xd0, 0xa4, 0x71, 0x6c, 0x6b, 0x4d, 0x7f, 0x06, 0x5f, 0x1c, 0xd8, 0xca,
	0xcc, 0xca, 0x92, 0xb2, 0xf6, 0x46, 0x4c, 0xa5, 0x9e, 0xcd, 0xb4, 0xa4, 0x92, 0xf1, 0x7e, 0x83,
	0xed, 0x0c, 0x5d, 0xa3, 0xa6, 0x2c, 0x56, 0x7e, 0xc3, 0x48, 0x56, 0xc9, 0xe2, 0xa4, 0x34, 0x5f,
	0x3f, 0x29, 0xc1, 0x3d, 0xf4, 0xa7, 0x4c, 0xce, 0x9f, 0xa8, 0xc4, 0x1a, 0x2d, 0x1d, 0x40, 0x7b,
	0xca, 0x62, 0xe4, 0x74, 0x9e, 0xcf, 0x43, 0x81, 0x83, 0x7b, 0x70, 0x4b, 0x67, 0xdb, 0x9f, 0x0f,
	0x9b, 0x4b, 0x94, 0x8a, 0x89, 0xfc, 0xe8, 0xe4, 0xf0, 0x5d, 0x35, 0xdf, 0x81, 0xfb, 0x80, 0x54,
	0xea, 0x09, 0x52, 0x5d, 0x6f, 0xe0, 0x90, 0xd3, 0x49, 0x9c, 0x1f, 0x1b, 0x8b, 0x82, 0x3b, 0xe8,
	0xd1, 0x28, 0x92, 0xa8, 0x54, 0x0d, 0x53, 0x1f, 0x36, 0xed, 0x62, 0xe3, 0xba, 0x4d, 0x72, 0x18,
	0xfc, 0x70, 0xa0, 0x5f, 0xf8, 0xda, 0x1c, 0x7e, 0x87, 0x5e, 0xb8, 0x90, 0x12, 0xb9, 0x1e, 0xda,
	0x45, 0x8e, 0x59, 0xb4, 0xc6, 0x7a, 0x27, 0xd0, 0x4f, 0x24, 0x2e, 0x99, 0x58, 0xa8, 0xe1, 0x8a,
	0xfb, 0x3a, 0xfd, 0xae, 0xfc, 0xbe, 0x39, 0xe0, 0x26, 0x54, 0xd2, 0x39, 0x6a, 0x94, 0x35, 0x7a,
	0xbd, 0x84, 0x4e, 0xb1, 0xdc, 0xd4, 0xd3, 0xab, 0xea, 0x43, 0xc1, 0xa7, 0x6c, 0x36, 0x4e, 0x05,
	0xa4, 0xd4, 0xa5, 0xd3, 0xb4, 0xa4, 0xf1, 0x02, 0x4d, 0x85, 0x1d, 0x92, 0x81, 0xe0, 0x33, 0xec,
	0x54, 0x2a, 0xb1, 0xe9, 0x14, 0x52, 0xa7, 0x22, 0xf5, 0xfe, 0x80, 0x96, 0x7e, 0x49, 0xd0, 0x6e,
	0xb8, 0x5b, 0x6e, 0x68, 0x0c, 0xd2, 0x3b, 0x9e, 0x18, 0x41, 0x11, 0x45, 0xeb, 0x0d, 0x51, 0x0c,
	0x61, 0xaf, 0xd8, 0x7f, 0x54, 0x6b, 0xac, 0x83, 0xef, 0x0e, 0x0c, 0xd6, 0x3c, 0xca, 0xab, 0xb5,
	0xcc, 0x29, 0x1b, 0xe6, 0x4a, 0x20, 0x65, 0x3f, 0xcd, 0xb7, 0xf5, 0xf3, 0x96, 0x47, 0x9b, 0x40,
	0x5f, 0xa1, 0x4e, 0x04, 0xe3, 0xba, 0xde, 0x38, 0xe7, 0xab, 0x4d, 0xcc, 0x0d, 0x52, 0xe0, 0xca,
	0xd4, 0x34, 0x57, 0xa6, 0xe6, 0x19, 0xdc, 0x72, 0x47, 0xdb, 0x78, 0xd5, 0xc7, 0x59, 0xf3, 0x39,
	0x84, 0x0e, 0x53, 0x64, 0xc1, 0x79, 0x7a, 0xe9, 0xda, 0x7b, 0xbb, 0x20, 0xde, 0xd5, 0xeb, 0x57,
	0x07, 0xfa, 0x53, 0x11, 0xc7, 0xe2, 0xa9, 0xd6, 0x29, 0x3e, 0x02, 0xc8, 0x57, 0xb3, 0xc8, 0x8e,
	0x55, 0x85, 0x49, 0x67, 0x34, 0x47, 0xd9, 0x91, 0x36, 0x45, 0x6d, 0x93, 0x35, 0xf6, 0x74, 0x54,
	0x7c, 0x51, 0xd8, 0x2f, 0x05, 0xaf, 0x0f, 0x5d, 0xcb, 0x8c, 0x19, 0x9f, 0xb9, 0xbf, 0x78, 0x5e,
	0x21, 0xb9, 0xca, 0xde, 0xac, 0xae, 0xe3, 0x0d, 0x60, 0xc7, 0x72, 0xd7, 0x4c, 0xd9, 0x17, 0xae,
	0xdb, 0x98, 0x6c, 0x98, 0xcf, 0x94, 0xcb, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x7f, 0x3d,
	0xbf, 0xe3, 0x08, 0x00, 0x00,
}
